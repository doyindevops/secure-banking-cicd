name: Staging Environment CI/CD

on:
  push:
    branches:
      

jobs:
  scan-and-build:
    name: SonarQube & ZAP Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java for Sonar
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          java-package: jdk
          check-latest: false
          server-id: github
          server-username: ${{ github.actor }}
          server-password: ${{ secrets.GITHUB_TOKEN }}
          overwrite-settings: true
          job-status: success
          token: ${{ secrets.SONAR_TOKEN }}
      

      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: ./app
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Build and run container for scanning
        run: |
          docker build -t securebanking-stage ./app
          docker run -d -p 8080:8080 --name testapp securebanking-stage
  
      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.9.0
        continue-on-error: true
        with:
          target: http://localhost:8080
          cmd_options: "-I -r owasp-zap-report.html -J report_json.json -w report_md.md"

  
      - name: Upload ZAP Scan Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
            name: zap-report
            path: zap-report.html
  
        

  terraform-deploy:
    name: Deploy Infra to Staging
    runs-on: ubuntu-latest
    needs: scan-and-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/envs/stage
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars"
        working-directory: terraform/envs/stage
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        


      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="terraform.tfvars"
        working-directory: ./terraform/envs/stage
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      

      - name: List files for debug
        run: ls -la
            